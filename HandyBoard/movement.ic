/*!
 * \file   movement.ic
 * \author Joseph Warner (warner.512@osu.edu)
 * \date   Spring, 2013
 * \brief  Controls the movement of the robot
 */

/*! Analog optosensor libraries */
#use fencdr2.icb
#use fencdr3.icb

/*! Motor port of the left motor */
#define MOTOR_LEFT  1

/*! Motor port of the right motor */
#define MOTOR_RIGHT 3

/*! Maximum speed */
#define MOVEMENT_MAX_SPEED 50

/*! The slowest a motor can be moving */
#define MOVEMENT_MIN_SPEED 15

/*! The speed of a wheel while turning */
#define MOVEMENT_TURN_SPEED 50

/*! A stopped motor */
#define MOVEMENT_STOPPED 0

/*! Number of marks in one rotation of the wheel */
#define MOVEMENT_MARKS_PER_TURN 28

/*! Diameter of the wheel */
#define MOVEMENT_WHEEL_DIAMETER 2.6875

/*! Marks per degree reversed */
#define MOVEMENT_MARKS_PER_DEGREE_REVERSE 0.23

/*! Marks per degree forward */
#define MOVEMENT_MARKS_PER_DEGREE_FORWARD 0.23

/*! Marks per inch */
float marks_per_inch = (float)MOVEMENT_MARKS_PER_TURN / (MOVEMENT_WHEEL_DIAMETER * 3.14159267);

/*!
 * \param[in] motor The motor that is to be updated
 * \param[in] speed The desired speed in the domain of [-100, 100]
 */
/*int movement_motor_update(int port, int speed) {
    // Convert speed to actual speed
    int actualSpeed = speed;//(int)((float)*(MOVEMENT_MAX_SPEED * speed) / 100.0);
    
    // Set the actual motor speed
    motor(port, actualSpeed);
    return 0;
}*/

/*!
 * \param[in] angle The angle to trun through in (0, 360]
 */
int movement_turn_right(int angle) {
    int encoder_left_counts = (int)(MOVEMENT_MARKS_PER_DEGREE_FORWARD * (float)angle);
    int encoder_right_counts = (int)(MOVEMENT_MARKS_PER_DEGREE_REVERSE * (float)angle);
    
    motor(MOTOR_LEFT, -1 * MOVEMENT_TURN_SPEED);
    motor(MOTOR_RIGHT, MOVEMENT_TURN_SPEED);
    
    // Shaft encoding    
    encoder2_counts = 0;
    encoder3_counts = 0;
    
    while (encoder_right_counts > encoder2_counts && encoder_left_counts > encoder3_counts);
    
    motor(MOTOR_LEFT, MOVEMENT_STOPPED);
    motor(MOTOR_RIGHT, MOVEMENT_STOPPED);
}

/*!
 * \param[in] angle The angle to trun through in (0, 360]
 */
int movement_turn_left(int angle) {
    int encoder_left_counts = (int)(MOVEMENT_MARKS_PER_DEGREE_REVERSE * (float)angle);
    int encoder_right_counts = (int)(MOVEMENT_MARKS_PER_DEGREE_FORWARD * (float)angle);
    
    motor(MOTOR_LEFT, MOVEMENT_TURN_SPEED);
    motor(MOTOR_RIGHT, -1 * MOVEMENT_TURN_SPEED);
    
    // Shaft encoding    
    encoder2_counts = 0;
    encoder3_counts = 0;
    
    while (encoder_right_counts > encoder2_counts && encoder_left_counts > encoder3_counts);
    
    motor(MOTOR_LEFT, MOVEMENT_STOPPED);
    motor(MOTOR_RIGHT, MOVEMENT_STOPPED);
}

/*!
 * \param[in] speed    The speed at which it will travel forward within [-100, 100]
 * \param[in] distance How far the robot will travel forward
 */
int movement_straight(int speed, float distance) {
    int encoder_left_counts = (int)(marks_per_inch * distance);
    int encoder_right_counts = (int)(marks_per_inch * distance);
    
    motor(MOTOR_LEFT,  speed);
    motor(MOTOR_RIGHT, speed);
    
    // Shaft encoding
    encoder2_counts = 0;
    encoder3_counts = 0;
    
    while (encoder_right_counts > encoder2_counts && encoder_left_counts > encoder3_counts);
    
    motor(MOTOR_LEFT, MOVEMENT_STOPPED);
    motor(MOTOR_RIGHT, MOVEMENT_STOPPED);
}

int movement_all_off() {
    motor(MOTOR_LEFT, MOVEMENT_STOPPED);
    motor(MOTOR_RIGHT, MOVEMENT_STOPPED);
}
